openapi: 3.0.1
x-stoplight:
  id: md0qeox63mod9
info:
  title: '${api_name}'
  version: '2022-02-20T10:40:16Z'
paths:
  /:
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getRoot
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsRoot
  /current:
    get:
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/current'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getCurrentAdmin
      description: return current admin
      summary: /admin/current-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /admin/current-OPTIONS
      operationId: optionsCurrentAdmin
    parameters: []
  /admin:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: email
        - schema:
            type: string
          in: query
          name: likely
        - schema:
            type: string
          in: query
          name: slim
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/admin'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.email: method.request.querystring.email
          integration.request.querystring.likely: method.request.querystring.likely
          integration.request.querystring.slim: method.request.querystring.slim
        passthroughBehavior: when_no_templates
        type: http
      operationId: getAdmin
      description: 会議の参加者を入力するドロップダウンリスト等に使用
      summary: /admin-GET
      security:
        - work-manager-admin-authorizer: []
    post:
      summary: /admin-POST
      operationId: postAdmin
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post admin
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInputs'
        description: ''
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/admin/admin'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /admin-OPTIONS
      operationId: optionAdmin
    parameters: []
  /activity:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/activity'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_templates
        type: http
      operationId: getActivity
      description: アクティビティ
      summary: /activity-GET
      security:
        - work-manager-admin-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /activity-OPTIONS
      operationId: optionActivity
    parameters: []
  /chat_report:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/chat_report'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_templates
        type: http
      operationId: getChatReport
      description: チャット報告
      summary: /chat_report-GET
      security:
        - work-manager-admin-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /chat_report-OPTIONS
      operationId: optionChatReport
    parameters: []
  '/admin/{id}':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/admin/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getAdminId
      description: return admin by id
      summary: '/admin/{id}-GET'
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/admin/{id}-OPTIONS'
      operationId: optionsAdminId
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/admin/{id}-PUT'
      operationId: putAdminId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update admin
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminInputs'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderInputs'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/admin/admin/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      summary: '/admin/{id}-DELETE'
      operationId: deleteAdminId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      description: delete admin
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/admin/admin/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  '/task/{id}':
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/admin/task/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putTaskId
      security:
        - work-manager-admin-authorizer: []
      description: update Task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInputs'
        description: ''
      summary: '/task/{id}-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: '/task/{id}-OPTIONS'
      operationId: optionTaskId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,DELETE'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    delete:
      summary: '/task/{id}-DELETE'
      operationId: deleteTaskId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      description: delete meeting record
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/admin/task/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /user:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: email
        - schema:
            type: string
          in: query
          name: likely
        - schema:
            type: string
          in: query
          name: slim
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/user'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.email: method.request.querystring.email
          integration.request.querystring.likely: method.request.querystring.likely
          integration.request.querystring.slim: method.request.querystring.slim
        passthroughBehavior: when_no_templates
        type: http
      operationId: getUser
      description: 会議の参加者を入力するドロップダウンリスト等に使用
      summary: /user-GET
      security:
        - work-manager-admin-authorizer: []
    post:
      summary: /user-POST
      operationId: postUser
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post user
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInputs'
        description: ''
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/admin/user'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /user-OPTIONS
      operationId: optionUser
    parameters: []
  '/user/{id}':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/user/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getUserId
      description: return user by id
      summary: '/user/{id}-GET'
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/user/{id}-OPTIONS'
      operationId: optionsUserId
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/user/{id}-PUT'
      operationId: putUserId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update user
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInputs'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderInputs'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/admin/user/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      summary: '/user/{id}-DELETE'
      operationId: deleteUserId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      description: delete user
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/admin/user/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  '/user/{id}/activity':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/user/{id}/activity'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.authenticatable: method.request.querystring.authenticatable
        passthroughBehavior: when_no_match
        type: http
      operationId: getUserActivity
      description: return user acitivity by id
      summary: '/user/{id}/activity-GET'
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: authenticatable
        - schema:
            type: string
          in: query
          name: page
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/user/{id}/activity-OPTIONS'
      operationId: optionsUserActivity
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/admin/{id}/activity':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/admin/{id}/activity'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.authenticatable: method.request.querystring.authenticatable
        passthroughBehavior: when_no_match
        type: http
      operationId: getAdminActivity
      description: return admin acitivity by id
      summary: '/admin/{id}/activity-GET'
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: authenticatable
        - schema:
            type: string
          in: query
          name: page
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/user/{id}/activity-OPTIONS'
      operationId: optionsAdminActivity
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  /department:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: name
        - schema:
            type: string
          in: query
          name: likely
        - schema:
            type: string
          in: query
          name: department_code
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/department'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.email: method.request.querystring.department_code
          integration.request.querystring.likely: method.request.querystring.likely
        passthroughBehavior: when_no_templates
        type: http
      operationId: getDepartment
      description: 部署一覧
      summary: /department-GET
      security:
        - work-manager-admin-authorizer: []
    post:
      summary: /department-POST
      operationId: postDepartment
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post department
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentInputs'
        description: ''
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/admin/department'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /department-OPTIONS
      operationId: optionDepartment
    parameters: []
  '/department/{id}':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/department/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getDepartmentId
      description: return department by id
      summary: '/department/{id}-GET'
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/user/{id}-OPTIONS'
      operationId: optionsDepartmentId
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/department/{id}-PUT'
      operationId: putDepartmentId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update department
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentInputs'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderInputs'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/admin/department/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      summary: '/department/{id}-DELETE'
      operationId: deleteDepartmentId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      description: delete department
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/admin/department/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /meeting_place:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: name
        - schema:
            type: string
          in: query
          name: likely
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeetingPlace'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/meeting_place'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.name: method.request.querystring.name
          integration.request.querystring.likely: method.request.querystring.likely
        passthroughBehavior: when_no_templates
        type: http
      operationId: getMeetingPlace
      description: 会議室一覧
      summary: /meeting_place-GET
      security:
        - work-manager-admin-authorizer: []
    post:
      summary: /meeting_place-POST
      operationId: postMeetingPlace
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingPlace'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post meeting place
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingPlaceInputs'
        description: ''
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/admin/meeting_place'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /meeting_place-OPTIONS
      operationId: optionMeetingPlace
    parameters: []
  '/meeting_place/{id}':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingPlace'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/meeting_place/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getMeetingPlaceId
      description: return meeting place by id
      summary: '/meeting_place/{id}-GET'
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/meeting_place/{id}-OPTIONS'
      operationId: optionsMeetingPlaceId
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/meeting_place/{id}-PUT'
      operationId: putMeetingPlaceId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingPlace'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update meeting place
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingPlaceInputs'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderInputs'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/admin/meeting_place/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      summary: '/meeting_place/{id}-DELETE'
      operationId: deleteMeetingPlaceId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: delete meeting place
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/admin/meeting_place/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /meeting_record/chart:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: group
        - schema:
            type: string
          in: query
          name: created_by_table
        - schema:
            type: string
          in: query
          name: created_by
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeetingRecord'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/meeting_record/chart'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.group: method.request.querystring.group
          integration.request.querystring.created_by_table: method.request.querystring.created_by_table
          integration.request.querystring.created_by: method.request.querystring.created_by
        passthroughBehavior: when_no_templates
        type: http
      operationId: getMeetingRecordChart
      description: 議事録チャート
      summary: /meeting_record/chart-GET
      security:
        - work-manager-admin-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /meeting_record-OPTIONS
      operationId: optionMeetingRecord
    parameters: []
  /blog/chart:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: group
        - schema:
            type: string
          in: query
          name: created_by_table
        - schema:
            type: string
          in: query
          name: created_by
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/blog/chart'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.group: method.request.querystring.group
          integration.request.querystring.created_by_table: method.request.querystring.created_by_table
          integration.request.querystring.created_by: method.request.querystring.created_by
        passthroughBehavior: when_no_templates
        type: http
      operationId: getBlogChart
      description: ブログチャート
      summary: /blog/chart-GET
      security:
        - work-manager-admin-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /blog/chart-OPTIONS
      operationId: optionBlogChart
    parameters: []
  /chat/chart:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: group
        - schema:
            type: string
          in: query
          name: created_by_table
        - schema:
            type: string
          in: query
          name: created_by
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/chat/chart'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.group: method.request.querystring.group
          integration.request.querystring.created_by_table: method.request.querystring.created_by_table
          integration.request.querystring.created_by: method.request.querystring.created_by
        passthroughBehavior: when_no_templates
        type: http
      operationId: getChatChart
      description: チャットチャート
      summary: /chat/chart-GET
      security:
        - work-manager-admin-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /chat/chart-OPTIONS
      operationId: optionChatChart
    parameters: []
  /progress:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: name
        - schema:
            type: string
          in: query
          name: likely
        - schema:
            type: string
          in: query
          name: value
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Progress'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/progress'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.email: method.request.querystring.name
          integration.request.querystring.likely: method.request.querystring.likely
        passthroughBehavior: when_no_templates
        type: http
      operationId: getProgress
      description: 進捗度一覧
      summary: /progress-GET
      security:
        - work-manager-admin-authorizer: []
    post:
      summary: /progress-POST
      operationId: postProgress
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post progress
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgressInputs'
        description: ''
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/admin/progress'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /progress-OPTIONS
      operationId: optionProgress
    parameters: []
  /prefecture:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Progress'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/prefecture'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_templates
        type: http
      operationId: getPrefecture
      description: 都道府県一覧
      summary: /prefecture-GET
      security:
        - work-manager-admin-authorizer: []
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /progress-OPTIONS
      operationId: optionPrefecture
      description: ''
    parameters: []
  '/progress/{id}':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/progress/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getProgressId
      description: return progress by id
      summary: '/progress/{id}-GET'
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/progress/{id}-OPTIONS'
      operationId: optionsProgressId
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/progress/{id}-PUT'
      operationId: putProgressId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update progress
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgressInputs'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderInputs'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/admin/progress/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      summary: '/progress/{id}-DELETE'
      operationId: deleteProgressId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      description: delete progress
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/admin/progress/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  '/organization/{id}':
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/progress/{id}-OPTIONS'
      operationId: optionsOrganizationId
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/organization/{id}-PUT'
      operationId: putOrganizationId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update organization
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInputs'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderInputs'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/admin/organization/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      summary: '/progress/{id}-DELETE'
      operationId: deleteOrganizationId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      description: delete organization
      security:
        - work-manager-admin-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/admin/organization/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
components:
  schemas:
    Admin:
      title: Admin
      type: object
      description: 認証時のデータ
      properties:
        id:
          type: integer
        full_name:
          type: string
        given_name:
          type: string
        given_name_kana:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        file_path:
          type: string
          nullable: true
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        is_initialized:
          type: boolean
        organization_id:
          type: integer
        email:
          type: string
        email_verified_at:
          type: string
        createdBy:
          type: string
        created_by:
          $ref: '#/components/schemas/User'
        organization_name:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        department:
          $ref: '#/components/schemas/Department'
      required:
        - id
        - full_name
        - given_name
        - given_name_kana
        - family_name
        - family_name_kana
    AuthenticatedAdmin:
      title: AuthenticatedAdmin
      type: object
      description: 認証時のデータ
      properties:
        id:
          description: ユーザーID
          type: integer
        full_name:
          description: フルネーム
          type: string
          example: 管理者 太郎
        given_name:
          description: 名
          type: string
          example: 太郎
        family_name:
          description: 姓
          type: string
          example: 管理者
        file_path:
          description: ファイルパス
          type: string
          example: admins/test1.jpg
          nullable: true
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        jwt:
          type: string
      required:
        - id
        - full_name
        - created_at
        - updated_at
    Activity:
      title: Activity
      type: object
      description: 通知
      properties:
        id:
          type: integer
        user_id:
          type: integer
          example: 0
        created_by:
          $ref: '#/components/schemas/User'
        action_type:
          $ref: '#/components/schemas/ActionType'
        is_read:
          type: boolean
        model_id:
          type: integer
          example: 0
        content:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - user_id
        - created_by
        - action_type
        - content
        - created_at
        - updated_at
    ActionType:
      title: ActionType
      type: object
      description: アクションタイプ
      properties:
        id:
          type: integer
        key:
          type: string
        label_name:
          type: string
        template_message:
          type: string
        is_notify:
          type: boolean
        link:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - key
        - label_name
        - template_message
        - is_notify
        - link
        - created_at
        - updated_at
    Blog:
      title: Blog
      description: ブログ
      type: object
      properties:
        id:
          type: integer
          format: int64
        written_by:
          $ref: '#/components/schemas/User'
        title:
          type: string
          description: タイトル
        body:
          type: string
          description: 記事の内容
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        images:
          type: array
          items:
            $ref: '#/components/schemas/BlogImage'
        likes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/BlogComment'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - id
        - written_by
        - title
        - body
        - created_at
        - updated_at
        - likes
        - comments
        - tags
    BlogComment:
      title: BlogComment
      description: ブログへのコメント
      type: object
      properties:
        id:
          type: integer
          format: int64
        blog_id:
          type: integer
          format: int64
        written_by:
          $ref: '#/components/schemas/User'
        body:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - blog_id
        - written_by
        - body
        - created_at
        - updated_at
    BlogCommentInputs:
      title: BlogCommentInputs
      description: Blogのコメントフォーム
      type: object
      properties:
        written_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        body:
          type: string
      required:
        - written_by
        - body
    BlogInputs:
      title: BlogInputs
      description: Blogの投稿フォーム
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        written_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        images:
          type: array
          items:
            type: object
            nullable: true
        file_paths:
          type: array
          description: 初投稿時はなくても良い
          items:
            type: string
            nullable: true
        tags:
          type: array
          items:
            type: integer
            nullable: true
      required:
        - title
        - body
    BlogImage:
      title: BlogImage
      description: ブログ画像
      type: object
      properties:
        id:
          type: integer
          format: int64
        blog_id:
          type: integer
          format: int64
        file_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - blog_id
        - file_path
        - created_at
        - updated_at
    BlogPage:
      title: BlogPage
      description: ブログ一覧のページ（ページャつき）
      type: object
      x-examples:
        example-1:
          value:
            data:
              - id: 0
                recorded_by:
                  id: 0
                  full_name: テスト 太郎
                  given_name: 太郎
                  family_name: テスト
                  file_path: users/test1.jpg
                  created_at: '2021-12-31 12:00:00'
                  updated_at: '2021-12-31 12:00:00'
                meeting_date: '2021-12-31 12:00:00'
                place: string
                title: 〇〇会議
                summary: 〇〇会議の概要
                members:
                  - id: 0
                    full_name: テスト 太郎
                    given_name: 太郎
                    family_name: テスト
                    file_path: users/test1.jpg
                    created_at: '2021-12-31 12:00:00'
                    updated_at: '2021-12-31 12:00:00'
                decisions: []
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Blog'
        first_page_url:
          description: 1ページ目のURL
          type: string
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        last_page:
          description: 最大ページ数
          type: integer
        last_page_url:
          description: 最終ページのURL
          type: string
        next_page_url:
          description: 次ページのURL
          type: string
          nullable: true
        path:
          description: 前ページのURL
          type: string
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        prev_page_url:
          description: 前ページのURL
          type: string
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
      required:
        - data
        - first_page_url
        - from
        - last_page
        - last_page_url
        - next_page_url
        - path
        - per_page
        - prev_page_url
        - to
        - total
    ChangePasswordInputs:
      title: ChangePasswordInputs
      description: ユーザが任意でパスワードを変更したい時
      type: object
      properties:
        old_password:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
      required:
        - old_password
        - password
        - password_confirmation
    ChatMessage:
      title: ChatMessage
      description: チャットメッセージ
      type: object
      properties:
        id:
          type: integer
          format: int64
        body:
          type: string
        written_by:
          $ref: '#/components/schemas/User'
        to:
          $ref: '#/components/schemas/User'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessageImage'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
        chat_message_reads:
          type: array
          items:
            $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        mine:
          type: boolean
          nullable: true
      required:
        - id
        - body
        - written_by
        - created_at
        - updated_at
    ChatMessageInputs:
      title: ChatMessageInputs
      description: ChatMessageの投稿フォーム
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        written_by:
          type: integer
          format: int64
          example: 1
        mentioned_to:
          type: integer
          format: int64
          example: 1
          nullable: true
        body:
          type: string
        files:
          type: array
          maxItems: 5
          minItems: 0
          items:
            type: object
            nullable: true
      required:
        - written_by
        - mentioned_to
        - body
    ChatMessageImage:
      title: ChatMessageImage
      description: チャット画像
      required:
        - id
        - file_path
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          format: int64
        chat_message_id:
          type: integer
          format: int64
        file_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
    ChatMessageRead:
      title: ChatMessageRead
      description: 既読
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        chat_message_id:
          type: integer
          description: 権限値
          format: int64
          example: 0
          minimum: 0
        member:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - chat_message_id
        - member
        - created_at
        - updated_at
    ChatReport:
      title: ChatReport
      description: チャット通報
      type: object
      properties:
        id:
          type: integer
          format: int64
        chat_message_id:
          type: integer
        report_category_id:
          type: integer
        is_report:
          type: boolean
        report_category:
          $ref: '#/components/schemas/ReportCategory'
        created_by:
          $ref: '#/components/schemas/User'
        chat_message:
          $ref: '#/components/schemas/ChatMessage'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - chat_message_id
        - report_category_id
        - is_report
        - created_at
        - updated_at
    ChatRoom:
      title: ChatRoom
      description: チャットルーム
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        members:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/User'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        last_reads:
          type: array
          items:
            $ref: '#/components/schemas/LastRead'
        unread_count:
          type: integer
          example: 0
          minimum: 0
      required:
        - id
        - name
        - members
        - messages
        - created_at
        - updated_at
    ChatRoomInputs:
      title: ChatRoomInputs
      description: ChatRoomの投稿フォーム
      type: object
      properties:
        created_by:
          type: integer
          format: int64
          example: 1
          nullable: true
        name:
          type: string
          nullable: true
        members:
          type: object
      required:
        - created_by
        - name
    DateFormat:
      type: string
      format: date-time
      example: '2021-12-31 12:00:00'
    DefaultError:
      title: DefaultError
      description: DefaultError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
    Department:
      title: Department
      description: 部署マスター
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        department_code:
          type: string
        color:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        created_by:
          $ref: '#/components/schemas/User'
        member_count:
          type: integer
      required:
        - id
        - name
        - department_code
        - created_at
        - updated_at
        - created_by
        - member_count
    DocumentFile:
      title: DocumentFile
      description: ドキュメントファイル
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            uploaded_by:
              id: 0
              full_name: テスト 太郎
              given_name: 太郎
              family_name: テスト
              file_path: users/test1.jpg
              created_at: '2021-12-31 12:00:00'
              updated_at: '2021-12-31 12:00:00'
            file_path: string
            created_at: '2021-12-31 12:00:00'
            updated_at: '2021-12-31 12:00:00'
            shared_members:
              - id: 0
                full_name: テスト 太郎
                given_name: 太郎
                family_name: テスト
                file_path: users/test1.jpg
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        uploaded_by:
          $ref: '#/components/schemas/User'
        file_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        shared_members:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - id
        - uploaded_by
        - file_path
        - created_at
        - updated_at
    DocumentFileInputs:
      title: DocumentFileInputs
      description: DocumentFileの投稿フォーム
      type: object
      properties:
        uploaded_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        file:
          type: string
        sharedMembers:
          type: object
        file_path:
          type: string
          description: 更新時のみ
      required:
        - uploaded_by
        - file
    DocumentFolder:
      title: DocumentFolder
      description: ドキュメントフォルダ
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            created_by:
              id: 0
              full_name: テスト 太郎
              given_name: 太郎
              family_name: テスト
              file_path: users/test1.jpg
              created_at: '2021-12-31 12:00:00'
              updated_at: '2021-12-31 12:00:00'
            name: string
            role:
              id: 0
              name: string
              value: 0
              created_at: '2021-12-31 12:00:00'
              updated_at: '2021-12-31 12:00:00'
            created_at: '2021-12-31 12:00:00'
            updated_at: '2021-12-31 12:00:00'
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        created_by:
          $ref: '#/components/schemas/User'
        name:
          type: string
        role:
          anyOf:
            - $ref: '#/components/schemas/Role'
            - properties: {}
              nullable: true
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - created_by
        - name
        - created_at
        - updated_at
    DocumentFolderInputs:
      title: DocumentFolderInputs
      description: DocumentFolderの投稿フォーム
      type: object
      properties:
        created_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        name:
          type: string
          format: int64
        role_id:
          type: integer
          format: date-time
          example: 0
      required:
        - name
    EmptyItem:
      title: EmptyItem
      description: データがないときの空配列
      type: array
      items:
        nullable: true
    FacialExpression:
      title: FacialExpression
      description: FacialExpression
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            name: smile
            file_path: file/to/path
      properties:
        id:
          type: integer
          description: エラーメッセージ
          format: int64
          minimum: 0
        name:
          type: string
        file_path:
          type: string
      required:
        - id
        - name
        - file_path
    ForbiddenError:
      title: ForbiddenError
      description: ForbiddenError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
    InvalidError:
      title: InvalidError
      description: InvalidError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
        errors:
          description: フォームアイテムごとのエラーメッセージ
          type: object
          additionalProperties: {}
    LastRead:
      title: LastRead
      description: ユーザごとの最後に読んだメッセージ
      type: object
      properties:
        id:
          type: integer
          example: 0
          format: int64
          minimum: 0
        chat_room_id:
          type: integer
          format: int64
          example: 0
          minimum: 0
        member_id:
          type: integer
          format: int64
          minimum: 0
          example: 0
        last_message_id:
          type: integer
          format: int64
          minimum: 0
          example: 0
        created_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - chat_room_id
        - member_id
        - last_message_id
    MeetingDecision:
      title: MeetingDecision
      description: ミーティング決定事項
      type: object
      properties:
        id:
          type: integer
          format: int64
        decided_by:
          $ref: '#/components/schemas/User'
        written_by:
          $ref: '#/components/schemas/User'
        subject:
          type: string
        body:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
      required:
        - id
        - decided_by
        - written_by
        - subject
        - body
    MeetingDecisionInputs:
      title: MeetingDecisionInputs
      description: ミーティング決定事項フォーム
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        decided_by:
          type: integer
          example: 1
          format: int64
          nullable: true
        written_by:
          type: integer
          example: 1
          minimum: 0
          format: int64
        subject:
          type: string
          example: 〇〇について
          nullable: true
        body:
          type: string
          example: 来月から〇〇とする
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskInputs'
        flag:
          type: integer
          nullable: true
      required:
        - written_by
        - body
    MeetingPage:
      title: MeetingPage
      description: 議事録一覧のページ（ページャつき）
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MeetingRecord'
        first_page_url:
          description: 1ページ目のURL
          type: string
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        last_page:
          description: 最大ページ数
          type: integer
        last_page_url:
          description: 最終ページのURL
          type: string
        next_page_url:
          description: 次ページのURL
          type: string
          nullable: true
        path:
          description: 前ページのURL
          type: string
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        prev_page_url:
          description: 前ページのURL
          type: string
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
      required:
        - data
        - first_page_url
        - from
        - last_page
        - last_page_url
        - next_page_url
        - path
        - per_page
        - prev_page_url
        - to
        - total
    MeetingPlace:
      title: MeetingPlace
      description: ミーティング開催場所
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        created_by:
          $ref: '#/components/schemas/User'
      required:
        - id
        - name
        - created_at
        - updated_at
        - created_by
    MeetingPlaceInputs:
      title: MeetingRecordInputs
      description: 会議室投稿フォーム
      type: object
      properties:
        name:
          type: string
      required:
        - name
    MeetingRecord:
      title: MeetingRecord
      description: ミーティングレコード
      type: object
      properties:
        id:
          type: integer
          format: int64
        recorded_by:
          $ref: '#/components/schemas/User'
        meeting_date:
          $ref: '#/components/schemas/DateFormat'
        place:
          $ref: '#/components/schemas/MeetingPlace'
        title:
          type: string
          example: 〇〇会議
        summary:
          type: string
          example: 〇〇会議の概要
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        decisions:
          type: array
          items:
            $ref: '#/components/schemas/MeetingDecision'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - recorded_by
        - meeting_date
        - place
        - title
        - summary
        - members
        - decisions
        - created_at
        - updated_at
    MeetingRecordInputs:
      title: MeetingRecordInputs
      description: 会議議事録投稿フォーム
      type: object
      properties:
        recorded_by:
          type: integer
          example: 1
          format: int64
          minimum: 0
        place_id:
          type: integer
          format: int64
          example: 1
          nullable: true
        meeting_date:
          $ref: '#/components/schemas/DateFormat'
        title:
          type: string
          example: 全体会議
        summary:
          type: string
          example: これは全体の会議です。
          nullable: true
        meeting_decisions:
          example: []
          type: array
          items:
            $ref: '#/components/schemas/MeetingDecisionInputs'
        members:
          type: array
          items:
            type: integer
      required:
        - recorded_by
        - meeting_date
        - title
    DepartmentInputs:
      title: DepartmentInputs
      description: 部署投稿フォーム
      type: object
      properties:
        name:
          type: string
        department_code:
          type: string
        color:
          type: string
      required:
        - name
    MeetingRecordPage:
      title: MeetingRecordPage
      description: 議事録一覧のページ（ページャつき）
      type: object
      x-examples:
        example-1:
          value:
            data:
              - id: 0
                recorded_by:
                  id: 0
                  full_name: テスト 太郎
                  given_name: 太郎
                  family_name: テスト
                  file_path: users/test1.jpg
                  created_at: '2021-12-31 12:00:00'
                  updated_at: '2021-12-31 12:00:00'
                meeting_date: '2021-12-31 12:00:00'
                place: string
                title: 〇〇会議
                summary: 〇〇会議の概要
                members:
                  - id: 0
                    full_name: テスト 太郎
                    given_name: 太郎
                    family_name: テスト
                    file_path: users/test1.jpg
                    created_at: '2021-12-31 12:00:00'
                    updated_at: '2021-12-31 12:00:00'
                decisions: []
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MeetingRecord'
        first_page_url:
          description: 1ページ目のURL
          type: string
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        last_page:
          description: 最大ページ数
          type: integer
        last_page_url:
          description: 最終ページのURL
          type: string
        next_page_url:
          description: 次ページのURL
          type: string
          nullable: true
        path:
          description: 前ページのURL
          type: string
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        prev_page_url:
          description: 前ページのURL
          type: string
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
      required:
        - data
        - first_page_url
        - from
        - last_page
        - last_page_url
        - next_page_url
        - path
        - per_page
        - prev_page_url
        - to
        - total
    MemberInputs:
      title: MemberInputs
      description: 共有相手用フォーム
      type: object
      properties:
        recorded_by:
          type: integer
          example: 1
          format: int64
          minimum: 0
        place_id:
          type: integer
          format: int64
          example: 1
          nullable: true
        meeting_date:
          $ref: '#/components/schemas/DateFormat'
        title:
          type: string
          example: 全体会議
        summary:
          type: string
          example: これは全体の会議です。
          nullable: true
        meeting_decisions:
          example: []
          type: array
          items:
            $ref: '#/components/schemas/MeetingDecisionInputs'
        members:
          type: array
          items:
            type: integer
      required:
        - recorded_by
        - meeting_date
        - title
    OrganizationInputs:
      title: OrganizationInputs
      description: 組織情報登録時のフォーム
      type: object
      properties:
        name:
          type: string
        name_kana:
          type: string
        postal_code:
          type: number
        pref_id:
          type: integer
        city:
          type: string
        address:
          type: string
        tel:
          type: string
        password:
          type: string
      required:
        - name
        - name_kana
        - postal_code
        - pref_id
        - city
        - address
        - tel
    ProgressInputs:
      title: ProgressInputs
      description: 進捗度投稿フォーム
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
    ReportCategory:
      title: ReportCategory
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        code:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - code
        - created_at
        - updated_at
    SettingInputs:
      title: SettingInputs
      description: 設定ページ
      type: object
      properties:
        notify_validation:
          type: object
        change_password:
          $ref: '#/components/schemas/ChangePasswordInputs'
    NotFoundError:
      title: NotFoundError
      description: NotFoundError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
    Organization:
      title: Organization
      description: 組織
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 優先度
          type: string
        name_kana:
          description: 優先度
          type: string
        pref_id:
          description: 優先値
          type: integer
          format: int64
        postal_code:
          description: 優先値
          type: integer
          format: int64
        city:
          description: 優先度
          type: string
        address:
          description: 優先度
          type: string
        tel:
          description: 優先度
          type: string
        supervisor_id:
          description: 優先値
          type: integer
          format: int64
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        file_path:
          type: string
      required:
        - id
        - name
        - name_kana
        - pref_id
        - postal_code
        - city
        - address
        - tel
        - created_at
        - updated_at
    Priority:
      title: Priority
      description: TODOの優先度
      required:
        - id
        - name
        - value
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 優先度
          type: string
        value:
          description: 優先値
          type: integer
          format: int64
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
    Prefecture:
      title: Prefecture
      description: 都道府県
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 優先度
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - created_at
        - updated_at
    ProfileInputs:
      title: ProfileInputs
      description: プロフィール更新時のフォーム
      type: object
      x-examples:
        example-1:
          value:
            scheduled_by: 1
            title: string
            start: '2019-08-24T14:15:22Z'
            end: '2019-08-24T14:15:22Z'
            is_public: true
            color: 'true'
            memo: 'true'
            sharedMembers: {}
      properties:
        family_name:
          type: string
        given_name:
          type: string
        family_name_kana:
          type: string
        given_name_kana:
          type: string
        delete_flag:
          type: boolean
        file:
          type: string
          format: binary
        change_password:
          type: boolean
      required:
        - family_name
        - given_name
        - family_name_kana
        - given_name_kana
    Progress:
      title: Progress
      description: TODOの達成度
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 達成度
          type: string
        value:
          description: 達成値
          type: integer
          format: int64
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        created_by:
          $ref: '#/components/schemas/User'
        is_default:
          type: boolean
        task_count:
          type: integer
      required:
        - id
        - name
        - value
        - created_at
        - updated_at
        - created_by
        - task_count
    Reaction:
      title: Reaction
      description: リアクション
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        chat_message_id:
          type: integer
          description: 権限値
          format: int64
          minimum: 0
        member:
          $ref: '#/components/schemas/User'
        facial_expression:
          $ref: '#/components/schemas/FacialExpression'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - chat_message_id
        - member
        - facial_expression
        - created_at
        - updated_at
    Role:
      title: Role
      description: ロール
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 権限名
          type: string
        value:
          type: integer
          description: 権限値
          format: int64
          minimum: 0
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - value
        - created_at
        - updated_at
    Schedule:
      title: Schedule
      description: スケジュール
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            scheduled_by: 0
            title: string
            start: '2019-08-24T14:15:22Z'
            end: '2019-08-24T14:15:22Z'
            is_public: true
            color: string
            messages: []
            shared_members:
              - id: 0
                full_name: テスト 太郎
                given_name: 太郎
                family_name: テスト
                file_path: users/test1.jpg
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            created_at: '2021-12-31 12:00:00'
            updated_at: '2021-12-31 12:00:00'
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        scheduled_by:
          $ref: '#/components/schemas/User'
        title:
          type: string
        start:
          $ref: '#/components/schemas/DateFormat'
        end:
          $ref: '#/components/schemas/DateFormat'
        is_public:
          type: boolean
          default: true
        color:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
        shared_members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - scheduled_by
        - title
        - start
        - end
        - shared_members
        - created_at
        - updated_at
    Tag:
      title: Tag
      description: Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - created_at
        - updated_at
    Task:
      title: Task
      description: Task
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          $ref: '#/components/schemas/User'
        created_by:
          $ref: '#/components/schemas/User'
        priority:
          anyOf:
            - $ref: '#/components/schemas/Priority'
            - properties: {}
              nullable: true
        progress:
          anyOf:
            - $ref: '#/components/schemas/Progress'
            - properties: {}
              nullable: true
        body:
          type: string
        time_limit:
          $ref: '#/components/schemas/DateFormat'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - owner
        - created_by
        - priority
        - progress
        - body
        - time_limit
        - created_at
        - updated_at
    TaskPage:
      title: TaskPage
      description: タスク一覧のページ（ページャつき）
      type: object
      x-examples:
        example-1:
          value:
            data:
              - id: 0
                recorded_by:
                  id: 0
                  full_name: テスト 太郎
                  given_name: 太郎
                  family_name: テスト
                  file_path: users/test1.jpg
                  created_at: '2021-12-31 12:00:00'
                  updated_at: '2021-12-31 12:00:00'
                meeting_date: '2021-12-31 12:00:00'
                place: string
                title: 〇〇会議
                summary: 〇〇会議の概要
                members:
                  - id: 0
                    full_name: テスト 太郎
                    given_name: 太郎
                    family_name: テスト
                    file_path: users/test1.jpg
                    created_at: '2021-12-31 12:00:00'
                    updated_at: '2021-12-31 12:00:00'
                decisions: []
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        first_page_url:
          description: 1ページ目のURL
          type: string
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        last_page:
          description: 最大ページ数
          type: integer
        last_page_url:
          description: 最終ページのURL
          type: string
        next_page_url:
          description: 次ページのURL
          type: string
          nullable: true
        path:
          description: 前ページのURL
          type: string
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        prev_page_url:
          description: 前ページのURL
          type: string
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
      required:
        - data
        - first_page_url
        - from
        - last_page
        - last_page_url
        - next_page_url
        - path
        - per_page
        - prev_page_url
        - to
        - total
    User:
      title: User
      description: ユーザーのデータ
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        given_name:
          type: string
        given_name_kana:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        file_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        is_initialized:
          type: boolean
        is_invited:
          type: boolean
        email:
          type: string
        email_verified_at:
          type: string
        createdBy:
          type: string
        created_by:
          $ref: '#/components/schemas/User'
        organization_id:
          type: integer
        organization:
          $ref: '#/components/schemas/Organization'
        department:
          $ref: '#/components/schemas/Department'
      required:
        - id
        - full_name
        - given_name
        - given_name_kana
        - family_name
        - family_name_kana
        - is_invited
    UserInputs:
      title: UserInputs
      description: ユーザー投稿フォーム
      type: object
      properties:
        given_name:
          type: string
        given_name_kana:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        email:
          type: string
        department_id:
          type: number
      required:
        - given_name
        - given_name_kana
        - family_name
        - family_name_kana
        - email
    AdminInputs:
      title: AdminInputs
      description: 管理者投稿フォーム
      type: object
      properties:
        given_name:
          type: string
        given_name_kana:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        email:
          type: string
      required:
        - given_name
        - given_name_kana
        - family_name
        - family_name_kana
        - email
    SigninInputs:
      title: SigninInputs
      description: サインインフォーム
      type: object
      properties:
        login_id:
          type: string
        password:
          type: string
      required:
        - login_id
        - password
    SignupInputs:
      title: SignupInputs
      description: サインアップフォーム
      type: object
      properties:
        given_name:
          type: string
        given_name_kana:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        login_id:
          type: string
      required:
        - given_name
        - given_name_kana
        - family_name
        - family_name_kana
        - email
        - password
        - password_confirmation
        - login_id
    AccountVerificationInputs:
      title: AccountVerificationInputs
      description: サインアップ後のアカウント検証フォーム
      type: object
      properties:
        login_id:
          type: string
          description: クエリパラメータから取得
        verification_code:
          type: string
      required:
        - login_id
        - verification_code
    ForgotPasswordInputs:
      title: ForgotPasswordInputs
      description: パスワードを忘れたときのフォーム
      type: object
      properties:
        login_id:
          type: string
      required:
        - login_id
    ScheduleInputs:
      title: ScheduleInputs
      description: Scheduleの投稿フォーム
      type: object
      properties:
        scheduled_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        title:
          type: string
          format: int64
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        is_public:
          type: boolean
          format: date-time
          default: true
          nullable: true
        color:
          type: string
          default: 'true'
          nullable: true
        memo:
          type: string
          default: 'true'
          nullable: true
        sharedMembers:
          type: object
      required:
        - scheduled_by
        - title
        - start
        - end
        - is_public
        - color
        - memo
      x-examples:
        example-1:
          value:
            scheduled_by: 1
            title: string
            start: '2019-08-24T14:15:22Z'
            end: '2019-08-24T14:15:22Z'
            is_public: true
            color: 'true'
            memo: 'true'
            sharedMembers: {}
    PasswordResetInputs:
      title: PasswordResetInputs
      description: パスワードリセットフォーム
      type: object
      properties:
        old_password:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
      required:
        - old_password
        - password
        - password_confirmation
    TaskInputs:
      title: TaskInputs
      description: Taskの投稿フォーム
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        owner_id:
          type: integer
          format: int64
          example: 1
          minimum: 0
        created_by:
          type: integer
          format: int64
          example: 1
        priority_id:
          type: integer
          format: int64
          minimum: 0
          nullable: true
        progress_id:
          type: integer
          format: int64
          minimum: 0
          nullable: true
        body:
          type: string
        time_limit:
          $ref: '#/components/schemas/DateFormat'
        flag:
          type: integer
          nullable: true
      required:
        - owner_id
        - body
        - time_limit
    ResetForgottenPasswordInputs:
      title: ResetForgottenPasswordInputs
      description: パスワードリセットフォーム
      type: object
      properties:
        login_id:
          type: string
        verification_code:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
      required:
        - login_id
        - verification_code
        - password
        - password_confirmation
    Empty:
      title: Empty Schema
      type: object
  securitySchemes:
    work-manager-admin-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - '${userpool_arns}'
        type: cognito_user_pools
  requestBodies:
    SignUpInputs:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              login_id:
                type: string
              address:
                type: string
              password:
                type: string
            required:
              - email
              - login_id
              - password
    SigninInputs:
      content:
        application/json:
          schema:
            type: object
            properties:
              login_id:
                type: string
              password:
                type: string
            required:
              - login_id
              - password
      description: login...mail address or loginID
    ForgotPasswordInputs:
      content:
        application/json:
          schema:
            type: object
            properties:
              login_id:
                type: string
            required:
              - login_id
      description: login_id...Mail address or loginID
    AccountVerificationInputs:
      content:
        application/json:
          schema:
            type: object
            properties:
              login_id:
                type: string
              verification_code:
                type: string
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: '''GET'''
      gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''http://localhost:3000'''
  ACCESS_DENIED:
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
      gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
x-amazon-apigateway-binary-media-types:
  - image/png
  - multipart/form-data
