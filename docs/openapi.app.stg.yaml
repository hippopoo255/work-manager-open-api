openapi: 3.0.1
x-stoplight:
  id: z0z1aomtlpaha
info:
  title: '${api_name}'
  version: '2022-02-07T10:46:56Z'
paths:
  /admin/current:
    get:
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/admin/current'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getCurrentAdmin
      description: return current admin
      summary: /admin/current-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /admin/current-OPTIONS
      operationId: optionsCurrentAdmin
    parameters: []
  /author/chat_message/unread/recently:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/author/chat_message/unread/recently'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getChatMessageUnread
      description: return unread message list
      summary: /author/chat_message/unread/recently-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /author/chat_message/unread/recently-OPTIONS
      operationId: optionsChatMessageUnread
    parameters: []
  /author/chat_room:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatRoom'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/author/chat_room'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getAuthorChatRoom
      description: return chat rooms author has joined
      summary: /author/chat_room-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsAuthorChatRoom
    parameters: []
  /author/schedule/daily:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/author/schedule/daily'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getAuthorDailySchedule
      description: return author daily schedule
      summary: /author/schedule/daily-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsAuthorDailySchedule
    parameters: []
  /author/minutes/recently:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Minutes'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/author/minutes/recently'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getRecentAuthorMinutes
      description: return author daily schedule
      summary: /author/minutes/recently-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /author/minutes/recently-OPTIONS
      operationId: optionsRecentAuthorMinutes
    parameters: []
  /author/task:
    get:
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: page
        - schema:
            type: string
          in: query
          name: status
        - schema:
            type: string
          in: query
          name: order_by
        - schema:
            type: string
          in: query
          name: sort_key
        - schema:
            type: string
          in: query
          name: progress_id
        - schema:
            type: string
          in: query
          name: priority_id
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/author/task'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.order_by: method.request.querystring.order_by
          integration.request.querystring.sort_key: method.request.querystring.sort_key
          integration.request.querystring.status: method.request.querystring.status
          integration.request.querystring.progress_id: method.request.querystring.progress_id
          integration.request.querystring.priority_id: method.request.querystring.priority_id
          integration.request.querystring.page: method.request.querystring.page
        passthroughBehavior: when_no_match
        type: http
      operationId: getTask
      security:
        - job-support-authorizer: []
      description: return author task
      summary: /author/task-GET
    parameters: []
    options:
      summary: /author/task-OPTIONS
      operationId: optionsAuthorTask
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET,DELETE'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    delete:
      summary: /author/task-DELETE
      operationId: deleteAuthorTask
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      description: delete task
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/author/task'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.order_by: method.request.querystring.order_by
          integration.request.querystring.sort_key: method.request.querystring.sort_key
          integration.request.querystring.status: method.request.querystring.status
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.progress_id: method.request.querystring.progress_id
          integration.request.querystring.priority_id: method.request.querystring.priority_id
        passthroughBehavior: when_no_match
        type: http
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: page
        - schema:
            type: string
          in: query
          name: status
        - schema:
            type: string
          in: query
          name: sort_key
        - schema:
            type: string
          in: query
          name: order_by
        - schema:
            type: string
          in: query
          name: priority_id
        - schema:
            type: string
          in: query
          name: progress_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDeleteForm'
  /author/task/busy:
    get:
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/author/task/busy'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getBusyTask
      security:
        - job-support-authorizer: []
      description: return author busy task
      summary: /author/task/busy-GET
    parameters: []
    options:
      summary: /author/task/busy-OPTIONS
      operationId: optionsAuthorBusyTask
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET,DELETE'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /blog_asset:
    post:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: 422 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: 'arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:${aws_account_id}:function:upload_image_${env_name}/invocations'
        responses:
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: '''https://${host}.${domain_name}'''
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: '''https://${host}.${domain_name}'''
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: '''https://${host}.${domain_name}'''
        requestTemplates:
          multipart/form-data: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
            "body-json" : $input.json('$'),
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws
      summary: /blog_asset-POST
      operationId: postBlogAsset
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: OPTIONS
        uri: '${alb_uri}/api'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
      operationId: optionsBlogAsset
  '/chat_message/{id}/report':
    post:
      responses:
        '201':
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatReport'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: 422 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/chat_message/{id}/report'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: postChatReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatReportForm'
        description: ''
      description: post chat report
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      security:
        - job-support-authorizer: []
      summary: '/chat_message/{id}/report-POST'
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsChatMessageReport
      summary: '/chat_message/{id}/report-OPTIONS'
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  /chat_room:
    post:
      responses:
        '201':
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: 422 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/chat_room'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: postChatRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRoomForm'
        description: ''
      description: return params
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      security:
        - job-support-authorizer: []
      summary: /chat_room-POST
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsChatRoom
    parameters: []
  '/chat_room/{id}':
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/chat_room/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getChatRoomId
      security:
        - job-support-authorizer: []
      description: return chat room by id
      summary: '/chat_room/{id}-GET'
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/chat_room/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putChatRoomId
      security:
        - job-support-authorizer: []
      description: update chat room data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRoomForm'
        description: ''
      summary: '/chat_room/{id}-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: '/chat_room/{id}-OPTIONS'
      operationId: optionsChatRoomId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,GET,DELETE'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    delete:
      summary: '/chat_room/{id}-DELETE'
      operationId: deleteChatRoomId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      description: delete chat room
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/chat_room/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
  '/chat_room/{id}/message':
    post:
      responses:
        '201':
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: 422 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/chat_room/{id}/message'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: postChatMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageForm'
        description: ''
      description: post chat message
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      security:
        - job-support-authorizer: []
      summary: '/chat_room/{id}/message-POST'
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsChatMessage
      summary: '/chat_room/{id}/message-OPTIONS'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/chat_room/{id}/read':
    post:
      responses:
        '201':
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: 422 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/chat_room/{id}/read'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: postChatRead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: ''
      description: post chat read
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      security:
        - job-support-authorizer: []
      summary: '/chat_room/{id}/read-POST'
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsChatMessageRead
      summary: '/chat_room/{id}/read-OPTIONS'
      description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/chat_room/{id}/message/{chat_message_id}':
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/chat_room/{id}/message/{chat_message_id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
          integration.request.path.chat_message_id: method.request.path.chat_message_id
        passthroughBehavior: when_no_match
        type: http
      operationId: putChatMessageId
      security:
        - job-support-authorizer: []
      description: update chat message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageForm'
        description: ''
      summary: '/chat_room/{id}/message/{chat_message_id}-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
        name: chat_message_id
        in: path
        required: true
    options:
      summary: '/chat_room/{id}/message/{chat_message_id}-OPTIONS'
      operationId: optionsChatMessageId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,GET,DELETE'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    delete:
      summary: '/chat_room/{id}/message/{chat_message_id}-DELETE'
      operationId: deleteChatMessageId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      description: delete chat message
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/chat_room/{id}/message/{chat_message_id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
          integration.request.path.chat_message_id: method.request.path.chat_message_id
        passthroughBehavior: when_no_match
        type: http
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
  /document_folder:
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentFolder'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/document_folder'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getDocumentFolder
      description: return document folder
      summary: /docuement_folder-GET
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /docuement_folder-OPTIONS
      operationId: optionsDocumentFolder
    parameters: []
    post:
      summary: /docuement_folder-POST
      operationId: postDocumentFolder
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post document folder
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentFolderForm'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/document_folder'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
  '/document_folder/{id}':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentFolder'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/document_folder/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getDocumentFolderId
      description: return document folder by id
      summary: '/document_folder/{id}-GET'
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/document_folder/{id}-OPTIONS'
      operationId: optionsDocumentFolderId
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/document_folder/{id}-PUT'
      operationId: putDocumentFolderId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update document folder
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentFolderForm'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderForm'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/document_folder/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /meeting_place:
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeetingPlace'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/meeting_place'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
      operationId: getMeetingPlace
      description: return meeting place list
      summary: /meeting_place-GET
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
      security:
        - job-support-authorizer: []
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /meeting_place-OPTIONS
      operationId: optionsMeetingPlace
  /minutes:
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pager'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Minutes'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/minutes'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.count: method.request.querystring.count
          integration.request.querystring.only_bookmark: method.request.querystring.only_bookmark
          integration.request.querystring.meeting_date: method.request.querystring.meeting_date
          integration.request.querystring.order_by: method.request.querystring.order_by
          integration.request.querystring.only_me: method.request.querystring.only_me
          integration.request.querystring.keyword: method.request.querystring.keyword
          integration.request.querystring.sort_key: method.request.querystring.sort_key
        passthroughBehavior: when_no_match
        type: http
      operationId: getMinutes
      description: return meeting record
      summary: /minutes-GET
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: keyword
        - schema:
            type: string
          in: query
          name: sort_key
        - schema:
            type: string
          in: query
          name: meeting_date
        - schema:
            type: string
          in: query
          name: count
        - schema:
            type: string
          in: query
          name: order_by
        - schema:
            type: string
          in: query
          name: only_bookmark
        - schema:
            type: string
          in: query
          name: page
        - schema:
            type: string
          in: query
          name: only_me
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /minutes-OPTIONS
      operationId: optionsMinutes
    parameters: []
    post:
      summary: /minutes-POST
      operationId: postMinutes
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Minutes'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post meeting record
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinutesForm'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/minutes'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
  '/minutes/{id}':
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Minutes'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/minutes/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getMinutesId
      security:
        - job-support-authorizer: []
      description: return meeting record by id
      summary: '/minutes/{id}-GET'
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Minutes'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/minutes/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putMinutesId
      security:
        - job-support-authorizer: []
      description: update meeting record
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinutesForm'
        description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: '/minutes/{id}-OPTIONS'
      operationId: optionsMinutesId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,GET,DELETE'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    delete:
      summary: '/minutes/{id}-DELETE'
      operationId: deleteMinutesId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinutesPage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      description: delete meeting record
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: keyword
        - schema:
            type: string
          in: query
          name: sort_key
        - schema:
            type: string
          in: query
          name: meeting_date
        - schema:
            type: string
          in: query
          name: count
        - schema:
            type: string
          in: query
          name: order_by
        - schema:
            type: string
          in: query
          name: only_bookmark
        - schema:
            type: string
          in: query
          name: page
        - schema:
            type: string
          in: query
          name: only_me
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/minutes/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.count: method.request.querystring.count
          integration.request.querystring.only_bookmark: method.request.querystring.only_bookmark
          integration.request.querystring.meeting_date: method.request.querystring.meeting_date
          integration.request.querystring.order_by: method.request.querystring.order_by
          integration.request.querystring.only_me: method.request.querystring.only_me
          integration.request.querystring.keyword: method.request.querystring.keyword
          integration.request.querystring.sort_key: method.request.querystring.sort_key
        passthroughBehavior: when_no_match
        type: http
  /organization:
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /organization-OPTIONS
      operationId: optionsOrganization
    parameters: []
    post:
      summary: /organization-POST
      operationId: postOrganization
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post organization
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterOrganizationForm'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/organization'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
  '/minutes/{id}/bookmark':
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Minutes'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/minutes/{id}/bookmark'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putMinutesBookmark
      security:
        - job-support-authorizer: []
      description: bookmark meeting record
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml:
            schema:
              $ref: '#/components/schemas/Empty'
        description: ''
      summary: '/minutes/{id}/bookmark-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: '/minutes/{id}/bookmark-OPTIONS'
      operationId: optionMinutesIBookmark
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    post:
      summary: '/minutes/{id}/bookmark-POST'
      operationId: postMinutesBookmark
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Minutes'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/minutes/{id}/bookmark'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /priority:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Priority'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/priority'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getPriority
      description: return priority list
      summary: /priority-GET
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsPriority
  /report_category:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportCategory'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/report_category'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getReportCategory
      description: return report categories
      summary: /report_category-GET
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionReportCategory
      summary: /report_category-OPTIONS
    parameters: []
  /prefecture:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prefecture'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/prefecture'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getPrefecture
      description: return prefecture list
      summary: /prefecture-GET
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsPrefecture
      summary: /prefecture-OPTIONS
    parameters: []
  /progress:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Progress'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/progress'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getProgress
      description: return progress list
      summary: /progress-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      operationId: optionsProgress
    parameters: []
  /schedule:
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/schedule'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getSchedule
      description: return schedule
      summary: /schedule-GET
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /schedule-OPTIONS
      operationId: optionsSchedule
    parameters: []
    post:
      summary: /schedule-POST
      operationId: postSchedule
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post schedule
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleForm'
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/schedule'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
  '/schedule/{id}':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/schedule/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getScheduleId
      description: return schedule by id
      summary: '/schedule/{id}-GET'
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/document_folder/{id}-OPTIONS'
      operationId: optionsScheduleId
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: '/schedule/{id}-PUT'
      operationId: putScheduleId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: update schedule
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleForm'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolderForm'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/schedule/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      summary: '/schedule/{id}-DELETE'
      operationId: deleteScheduleId
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      description: delete schedule
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/schedule/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /task:
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskPage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/task'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getTaskPage
      description: return task
      summary: /task-GET
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /task-OPTIONS
      operationId: optionsTask
    parameters: []
    post:
      summary: /task-POST
      operationId: postTask
      responses:
        '201':
          description: Created
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      description: post task
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskForm'
        description: ''
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: '${alb_uri}/api/task'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_match
        type: http
  '/task/{id}':
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/task/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putTaskId
      security:
        - job-support-authorizer: []
      description: update task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskForm'
        description: ''
      summary: '/task/{id}-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: '/task/{id}-OPTIONS'
      operationId: optionTaskId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,DELETE'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    delete:
      summary: '/task/{id}-DELETE'
      operationId: deleteTaskId
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      description: delete meeting record
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: '${alb_uri}/api/task/{id}'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /user:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: query
          name: email
        - schema:
            type: string
          in: query
          name: likely
        - schema:
            type: string
          in: query
          name: slim
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/user'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.querystring.email: method.request.querystring.email
          integration.request.querystring.likely: method.request.querystring.likely
          integration.request.querystring.slim: method.request.querystring.slim
        passthroughBehavior: when_no_templates
        type: http
      operationId: getUser
      description: 会議の参加者を入力するドロップダウンリスト等に使用
      summary: /user-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /user-OPTIONS
      operationId: optionUser
    parameters: []
  /user/current:
    get:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Origin
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/user/current'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
        passthroughBehavior: when_no_templates
        type: http
      operationId: getCurrentUser
      description: return current auth object
      summary: /user/current-GET
    options:
      parameters: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: /user/current-OPTIONS
      operationId: optionCurrentUser
    parameters: []
  '/user/{id}/activity/read':
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/user/{id}/activity/read'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putUserActivityRead
      security:
        - job-support-authorizer: []
      description: update activity read
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        description: ''
      summary: '/user/{id}/activity/read-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: '/user/{id}/activity-OPTIONS'
      operationId: optionUserActivityRead
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/user/{id}/activity':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/user/{id}/activity'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getActivityByUser
      description: return activity on user
      summary: '/user/{id}/activity-GET'
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/user/{id}/schedule-OPTIONS'
      operationId: optionsUserActivity
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/user/{id}/profile':
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/user/{id}/profile'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putProfile
      security:
        - job-support-authorizer: []
      description: プロフィールの更新
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileInputs'
        description: ''
      summary: '/user/{id}/profile-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: user profile
      operationId: optionProfile
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/user/{id}/setting':
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
        - schema:
            type: string
          in: header
          name: X-HTTP-Method-Override
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '422':
          description: Unprocessable Entity (WebDAV)
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: '${alb_uri}/api/user/{id}/setting'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '422':
            statusCode: '422'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.header.X-HTTP-Method-Override: method.request.header.X-HTTP-Method-Override
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putUserSetting
      security:
        - job-support-authorizer: []
      description: customize user settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingForm'
        description: ''
      summary: '/user/{id}/setting-PUT'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    options:
      summary: '/user/{id}/setting-OPTIONS'
      operationId: optionUserSetting
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      description: preflight
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-HTTP-Method-Override'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/user/{id}/schedule':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/user/{id}/schedule'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: getUserIdSchedule
      description: return schedule on user
      summary: '/user/{id}/schedule-GET'
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/user/{id}/schedule-OPTIONS'
      operationId: optionsUserSchedule
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/user/{id}/notify_validation':
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        '403':
          description: Forbidden
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api/user/{id}/notify_validation'
        responses:
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.Origin: method.request.header.Origin
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
      operationId: putUserNotifyValidation
      description: update user notify validation
      summary: '/user/{id}/notify_validation-GET'
      security:
        - job-support-authorizer: []
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
        - schema:
            type: string
          in: header
          name: Origin
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Expose-Headers: '''Date, x-api-id'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
      summary: '/user/{id}/notify_validation-OPTIONS'
      operationId: optionsNotifyValidation
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  /:
    get:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - job-support-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: '${alb_uri}/api'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type'''
              method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        passthroughBehavior: when_no_match
        type: http
      operationId: getRoot
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: OPTIONS
        uri: '${alb_uri}/api'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''300'''
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
      operationId: optionsRoot
components:
  schemas:
    Admin:
      title: Admin
      type: object
      description: 認証時のデータ
      properties:
        id:
          type: integer
        full_name:
          type: string
        given_name:
          type: string
        given_name_kana:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        face_photo_path:
          type: string
          nullable: true
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        is_initialized:
          type: boolean
        organization_id:
          type: integer
      required:
        - id
        - full_name
        - given_name
        - given_name_kana
        - family_name
        - family_name_kana
    Agenda:
      title: Agenda
      type: object
      description: 議事録の議題
      x-stoplight:
        id: 6fca855d34c97
      properties:
        id:
          type: integer
        minutes_id:
          type: integer
        subject:
          type: string
        description:
          type: string
        created_by:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - minutes_id
        - subject
        - description
        - created_by
    AuthenticatedAdmin:
      title: AuthenticatedAdmin
      type: object
      description: 認証時のデータ
      properties:
        id:
          description: ユーザーID
          type: integer
        full_name:
          description: フルネーム
          type: string
          example: 管理者 太郎
        given_name:
          description: 名
          type: string
          example: 太郎
        family_name:
          description: 姓
          type: string
          example: 管理者
        file_path:
          description: ファイルパス
          type: string
          example: admins/test1.jpg
          nullable: true
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        jwt:
          type: string
      required:
        - id
        - full_name
        - created_at
        - updated_at
    Activity:
      title: Activity
      type: object
      description: 通知
      properties:
        id:
          type: integer
        user_id:
          type: integer
          example: 0
        action_type_id:
          type: integer
          example: 0
        is_read:
          type: boolean
        model_id:
          type: integer
          example: 0
        content:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - user_id
        - action_type_id
        - created_at
        - updated_at
    Blog:
      title: Blog
      description: ブログ
      type: object
      properties:
        id:
          type: integer
          format: int64
        written_by:
          $ref: '#/components/schemas/User'
        title:
          type: string
          description: タイトル
        body:
          type: string
          description: 記事の内容
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        images:
          type: array
          items:
            $ref: '#/components/schemas/BlogImage'
        likes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/BlogComment'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - id
        - written_by
        - title
        - body
        - created_at
        - updated_at
        - likes
        - comments
        - tags
    BlogComment:
      title: BlogComment
      description: ブログへのコメント
      type: object
      properties:
        id:
          type: integer
          format: int64
        blog_id:
          type: integer
          format: int64
        written_by:
          $ref: '#/components/schemas/User'
        body:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - blog_id
        - written_by
        - body
        - created_at
        - updated_at
    BlogCommentForm:
      title: BlogCommentForm
      description: Blogのコメントフォーム
      type: object
      properties:
        written_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        body:
          type: string
      required:
        - written_by
        - body
    BlogForm:
      title: BlogForm
      description: Blogの投稿フォーム
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        written_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        images:
          type: array
          items:
            type: object
            nullable: true
        file_paths:
          type: array
          description: 初投稿時はなくても良い
          items:
            type: string
            nullable: true
        tags:
          type: array
          items:
            type: integer
            nullable: true
      required:
        - title
        - body
    BlogImage:
      title: BlogImage
      description: ブログ画像
      type: object
      properties:
        id:
          type: integer
          format: int64
        blog_id:
          type: integer
          format: int64
        file_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - blog_id
        - file_path
        - created_at
        - updated_at
    BlogPage:
      title: BlogPage
      description: ブログ一覧のページ（ページャつき）
      type: object
      x-examples:
        example-1:
          value:
            data:
              - id: 0
                recorded_by:
                  id: 0
                  full_name: テスト 太郎
                  given_name: 太郎
                  family_name: テスト
                  file_path: users/test1.jpg
                  created_at: '2021-12-31 12:00:00'
                  updated_at: '2021-12-31 12:00:00'
                meeting_date: '2021-12-31 12:00:00'
                place: string
                title: 〇〇会議
                summary: 〇〇会議の概要
                members:
                  - id: 0
                    full_name: テスト 太郎
                    given_name: 太郎
                    family_name: テスト
                    file_path: users/test1.jpg
                    created_at: '2021-12-31 12:00:00'
                    updated_at: '2021-12-31 12:00:00'
                decisions: []
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Blog'
        first_page_url:
          description: 1ページ目のURL
          type: string
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        last_page:
          description: 最大ページ数
          type: integer
        last_page_url:
          description: 最終ページのURL
          type: string
        next_page_url:
          description: 次ページのURL
          type: string
          nullable: true
        path:
          description: 前ページのURL
          type: string
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        prev_page_url:
          description: 前ページのURL
          type: string
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
      required:
        - data
        - first_page_url
        - from
        - last_page
        - last_page_url
        - next_page_url
        - path
        - per_page
        - prev_page_url
        - to
        - total
    ChangePasswordInputs:
      title: ChangePasswordInputs
      description: ユーザが任意でパスワードを変更したい時
      type: object
      properties:
        old_password:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
      required:
        - old_password
        - password
        - password_confirmation
      x-stoplight:
        id: e55a044810d57
    ChatMessage:
      title: ChatMessage
      description: チャットメッセージ
      type: object
      properties:
        id:
          type: integer
          format: int64
        body:
          type: string
        written_by:
          $ref: '#/components/schemas/User'
        to:
          $ref: '#/components/schemas/User'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessageImage'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
        chat_message_reads:
          type: array
          items:
            $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        mine:
          type: boolean
          nullable: true
      required:
        - id
        - body
        - written_by
        - created_at
        - updated_at
    ChatMessageForm:
      title: ChatMessageForm
      description: ChatMessageの投稿フォーム
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        written_by:
          type: integer
          format: int64
          example: 1
        mentioned_to:
          type: integer
          format: int64
          example: 1
          nullable: true
        body:
          type: string
        files:
          type: array
          maxItems: 5
          minItems: 0
          items:
            type: object
            nullable: true
      required:
        - written_by
        - mentioned_to
        - body
    ChatMessageImage:
      title: ChatMessageImage
      description: チャット画像
      required:
        - id
        - file_path
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          format: int64
        chat_message_id:
          type: integer
          format: int64
        file_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
    ChatMessageRead:
      title: ChatMessageRead
      description: 既読
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        chat_message_id:
          type: integer
          description: 権限値
          format: int64
          example: 0
          minimum: 0
        member:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - chat_message_id
        - member
        - created_at
        - updated_at
    ChatReport:
      title: ChatReport
      description: チャット通報
      type: object
      properties:
        id:
          type: integer
          format: int64
        chat_message_id:
          type: integer
        report_category_id:
          type: integer
        is_report:
          type: boolean
        report_category:
          $ref: '#/components/schemas/ReportCategory'
        created_by:
          $ref: '#/components/schemas/User'
        chat_message:
          $ref: '#/components/schemas/ChatMessage'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - is_report
        - created_at
        - updated_at
    ChatReportForm:
      title: ChatReportForm
      description: チャット通報用リクエストボディ
      type: object
      properties:
        report_category_id:
          type: integer
      required:
        - report_category_id
    ChatRoom:
      title: ChatRoom
      description: チャットルーム
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        members:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/User'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        last_reads:
          type: array
          items:
            $ref: '#/components/schemas/LastRead'
        unread_count:
          type: integer
          example: 0
          minimum: 0
      required:
        - id
        - name
        - members
        - messages
        - created_at
        - updated_at
    ChatRoomForm:
      title: ChatRoomForm
      description: ChatRoomの投稿フォーム
      type: object
      properties:
        created_by:
          type: integer
          format: int64
          example: 1
          nullable: true
        name:
          type: string
          nullable: true
        members:
          type: object
      required:
        - created_by
        - name
    DateFormat:
      type: string
      format: date-time
      example: '2021-12-31 12:00:00'
    DefaultError:
      title: DefaultError
      description: DefaultError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
    Department:
      title: Department
      description: 部署マスター
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - created_at
        - updated_at
    DocumentFile:
      title: DocumentFile
      description: ドキュメントファイル
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            uploaded_by:
              id: 0
              full_name: テスト 太郎
              given_name: 太郎
              family_name: テスト
              file_path: users/test1.jpg
              created_at: '2021-12-31 12:00:00'
              updated_at: '2021-12-31 12:00:00'
            file_path: string
            created_at: '2021-12-31 12:00:00'
            updated_at: '2021-12-31 12:00:00'
            shared_members:
              - id: 0
                full_name: テスト 太郎
                given_name: 太郎
                family_name: テスト
                file_path: users/test1.jpg
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        uploaded_by:
          $ref: '#/components/schemas/User'
        file_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        shared_members:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - id
        - uploaded_by
        - file_path
        - created_at
        - updated_at
    DocumentFileForm:
      title: DocumentFileForm
      description: DocumentFileの投稿フォーム
      type: object
      properties:
        uploaded_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        file:
          type: string
        sharedMembers:
          type: object
        file_path:
          type: string
          description: 更新時のみ
      required:
        - uploaded_by
        - file
    DocumentFolder:
      title: DocumentFolder
      description: ドキュメントフォルダ
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            created_by:
              id: 0
              full_name: テスト 太郎
              given_name: 太郎
              family_name: テスト
              file_path: users/test1.jpg
              created_at: '2021-12-31 12:00:00'
              updated_at: '2021-12-31 12:00:00'
            name: string
            role:
              id: 0
              name: string
              value: 0
              created_at: '2021-12-31 12:00:00'
              updated_at: '2021-12-31 12:00:00'
            created_at: '2021-12-31 12:00:00'
            updated_at: '2021-12-31 12:00:00'
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        created_by:
          $ref: '#/components/schemas/User'
        name:
          type: string
        role:
          anyOf:
            - $ref: '#/components/schemas/Role'
            - properties: {}
              nullable: true
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - created_by
        - name
        - created_at
        - updated_at
    DocumentFolderForm:
      title: DocumentFolderForm
      description: DocumentFolderの投稿フォーム
      type: object
      properties:
        created_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        name:
          type: string
          format: int64
        role_id:
          type: integer
          format: date-time
          example: 0
      required:
        - name
    EmptyItem:
      title: EmptyItem
      description: データがないときの空配列
      type: array
      items:
        nullable: true
    FacialExpression:
      title: FacialExpression
      description: FacialExpression
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            name: smile
            file_path: file/to/path
      properties:
        id:
          type: integer
          description: エラーメッセージ
          format: int64
          minimum: 0
        name:
          type: string
        file_path:
          type: string
      required:
        - id
        - name
        - file_path
    ForbiddenError:
      title: ForbiddenError
      description: ForbiddenError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
    InvalidError:
      title: InvalidError
      description: InvalidError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
        errors:
          description: フォームアイテムごとのエラーメッセージ
          type: object
          additionalProperties: {}
    LoginBody:
      title: LoginBody
      description: ログインIDとパスワードのフォーム
      required:
        - login_id
        - password
      type: object
      properties:
        login_id:
          type: string
          example: testman1
        password:
          type: string
          format: password
          example: password
    LastRead:
      title: LastRead
      description: ユーザごとの最後に読んだメッセージ
      type: object
      properties:
        id:
          type: integer
          example: 0
          format: int64
          minimum: 0
        chat_room_id:
          type: integer
          format: int64
          example: 0
          minimum: 0
        member_id:
          type: integer
          format: int64
          minimum: 0
          example: 0
        last_message_id:
          type: integer
          format: int64
          minimum: 0
          example: 0
        created_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - chat_room_id
        - member_id
        - last_message_id
    MeetingDecision:
      title: MeetingDecision
      description: ミーティング決定事項
      type: object
      properties:
        id:
          type: integer
          format: int64
        decided_by:
          $ref: '#/components/schemas/User'
        written_by:
          $ref: '#/components/schemas/User'
        subject:
          type: string
        body:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
      required:
        - id
        - decided_by
        - written_by
        - subject
        - body
    MeetingDecisionForm:
      title: MeetingDecisionForm
      description: ミーティング決定事項フォーム
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        decided_by:
          type: integer
          example: 1
          format: int64
          nullable: true
        written_by:
          type: integer
          example: 1
          minimum: 0
          format: int64
        subject:
          type: string
          example: 〇〇について
          nullable: true
        body:
          type: string
          example: 来月から〇〇とする
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskForm'
        flag:
          type: integer
          nullable: true
      required:
        - written_by
        - body
    MeetingPlace:
      title: MeetingPlace
      description: ミーティング開催場所
      required:
        - id
        - name
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
    Minutes:
      title: Minutes
      description: 議事録
      type: object
      x-stoplight:
        id: b34984bce68f9
      properties:
        id:
          type: integer
          format: int64
        created_by:
          $ref: '#/components/schemas/User'
        meeting_date:
          $ref: '#/components/schemas/DateFormat'
        place:
          $ref: '#/components/schemas/MeetingPlace'
        title:
          type: string
          example: 〇〇会議
        summary:
          type: string
          example: 〇〇会議の概要
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        agendas:
          type: array
          items:
            $ref: '#/components/schemas/Agenda'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - created_by
        - meeting_date
        - place
        - title
        - summary
        - members
        - agendas
        - created_at
        - updated_at
    MinutesForm:
      title: MinutesForm
      description: 会議議事録投稿フォーム
      type: object
      properties:
        recorded_by:
          type: integer
          example: 1
          format: int64
          minimum: 0
        place_id:
          type: integer
          format: int64
          example: 1
          nullable: true
        meeting_date:
          $ref: '#/components/schemas/DateFormat'
        title:
          type: string
          example: 全体会議
        summary:
          type: string
          example: これは全体の会議です。
          nullable: true
        meeting_decisions:
          example: []
          type: array
          items:
            $ref: '#/components/schemas/MeetingDecisionForm'
        members:
          type: array
          items:
            type: integer
      required:
        - recorded_by
        - meeting_date
        - title
    MinutesPage:
      title: MinutesPage
      description: 議事録一覧のページ（ページャつき）
      type: object
      x-examples:
        example-1:
          value:
            data:
              - id: 0
                recorded_by:
                  id: 0
                  full_name: テスト 太郎
                  given_name: 太郎
                  family_name: テスト
                  file_path: users/test1.jpg
                  created_at: '2021-12-31 12:00:00'
                  updated_at: '2021-12-31 12:00:00'
                meeting_date: '2021-12-31 12:00:00'
                place: string
                title: 〇〇会議
                summary: 〇〇会議の概要
                members:
                  - id: 0
                    full_name: テスト 太郎
                    given_name: 太郎
                    family_name: テスト
                    file_path: users/test1.jpg
                    created_at: '2021-12-31 12:00:00'
                    updated_at: '2021-12-31 12:00:00'
                decisions: []
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Minutes'
        first_page_url:
          description: 1ページ目のURL
          type: string
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        last_page:
          description: 最大ページ数
          type: integer
        last_page_url:
          description: 最終ページのURL
          type: string
        next_page_url:
          description: 次ページのURL
          type: string
          nullable: true
        path:
          description: 前ページのURL
          type: string
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        prev_page_url:
          description: 前ページのURL
          type: string
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
      required:
        - data
        - first_page_url
        - from
        - last_page
        - last_page_url
        - next_page_url
        - path
        - per_page
        - prev_page_url
        - to
        - total
    MemberForm:
      title: MemberForm
      description: 共有相手用フォーム
      type: object
      properties:
        recorded_by:
          type: integer
          example: 1
          format: int64
          minimum: 0
        place_id:
          type: integer
          format: int64
          example: 1
          nullable: true
        meeting_date:
          $ref: '#/components/schemas/DateFormat'
        title:
          type: string
          example: 全体会議
        summary:
          type: string
          example: これは全体の会議です。
          nullable: true
        meeting_decisions:
          example: []
          type: array
          items:
            $ref: '#/components/schemas/MeetingDecisionForm'
        members:
          type: array
          items:
            type: integer
      required:
        - recorded_by
        - meeting_date
        - title
    RegisterOrganizationForm:
      title: RegisterOrganizationForm
      description: 組織情報登録時のフォーム
      type: object
      properties:
        name:
          type: string
        name_kana:
          type: string
        postal_code:
          type: string
        pref_id:
          type: integer
        city:
          type: string
        address:
          type: string
        tel:
          type: string
        password:
          type: string
      required:
        - name
        - name_kana
        - postal_code
        - pref_id
        - city
        - address
        - tel
        - password
      x-stoplight:
        id: 54d22028a639a
    SettingForm:
      title: SettingForm
      description: 設定ページ
      type: object
      properties:
        notify_validation:
          type: object
        change_password:
          $ref: '#/components/schemas/ChangePasswordInputs'
    NotFoundError:
      title: NotFoundError
      description: NotFoundError
      type: object
      properties:
        message:
          description: エラーメッセージ
          type: string
    Organization:
      title: Organization
      description: 組織
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 優先度
          type: string
        name_kana:
          description: 優先度
          type: string
        pref_id:
          description: 優先値
          type: integer
          format: int64
        postal_code:
          description: 優先値
          type: string
          format: int64
        city:
          description: 優先度
          type: string
        address:
          description: 優先度
          type: string
        tel:
          description: 優先度
          type: string
        supervisor_id:
          description: 優先値
          type: integer
          format: int64
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - created_at
        - updated_at
    Priority:
      title: Priority
      description: TODOの優先度
      required:
        - id
        - name
        - value
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 優先度
          type: string
        value:
          description: 優先値
          type: integer
          format: int64
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
    Prefecture:
      title: Prefecture
      description: 都道府県
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 優先度
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - created_at
        - updated_at
    ProfileInputs:
      title: ProfileInputs
      description: プロフィール更新時のフォーム
      type: object
      x-examples:
        example-1:
          value:
            scheduled_by: 1
            title: string
            start: '2019-08-24T14:15:22Z'
            end: '2019-08-24T14:15:22Z'
            is_public: true
            color: 'true'
            memo: 'true'
            sharedMembers: {}
      properties:
        family_name:
          type: string
        given_name:
          type: string
        family_name_kana:
          type: string
        given_name_kana:
          type: string
        face_photo:
          type: string
          format: binary
      required:
        - family_name
        - given_name
        - family_name_kana
        - given_name_kana
      x-stoplight:
        id: 4a8d732ed3051
    Progress:
      title: Progress
      description: TODOの達成度
      required:
        - id
        - name
        - value
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 達成度
          type: string
        value:
          description: 達成値
          type: integer
          format: int64
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
    ReportCategory:
      title: ReportCategory
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        code:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - code
        - created_at
        - updated_at
    Reaction:
      title: Reaction
      description: リアクション
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        chat_message_id:
          type: integer
          description: 権限値
          format: int64
          minimum: 0
        member:
          $ref: '#/components/schemas/User'
        facial_expression:
          $ref: '#/components/schemas/FacialExpression'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - chat_message_id
        - member
        - facial_expression
        - created_at
        - updated_at
    Role:
      title: Role
      description: ロール
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          description: 権限名
          type: string
        value:
          type: integer
          description: 権限値
          format: int64
          minimum: 0
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - value
        - created_at
        - updated_at
    Schedule:
      title: Schedule
      description: スケジュール
      type: object
      x-examples:
        example-1:
          value:
            id: 0
            scheduled_by: 0
            title: string
            start: '2019-08-24T14:15:22Z'
            end: '2019-08-24T14:15:22Z'
            is_public: true
            color: string
            messages: []
            shared_members:
              - id: 0
                full_name: テスト 太郎
                given_name: 太郎
                family_name: テスト
                file_path: users/test1.jpg
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            created_at: '2021-12-31 12:00:00'
            updated_at: '2021-12-31 12:00:00'
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        scheduled_by:
          $ref: '#/components/schemas/User'
        title:
          type: string
        start:
          $ref: '#/components/schemas/DateFormat'
        end:
          $ref: '#/components/schemas/DateFormat'
        is_public:
          type: boolean
          default: true
        color:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
        shared_members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - scheduled_by
        - title
        - start
        - end
        - shared_members
        - created_at
        - updated_at
    ScheduleForm:
      title: ScheduleForm
      description: Scheduleの投稿フォーム
      type: object
      properties:
        scheduled_by:
          type: integer
          format: int64
          example: 1
          minimum: 0
        title:
          type: string
          format: int64
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        is_public:
          type: boolean
          format: date-time
          default: true
          nullable: true
        color:
          type: string
          default: 'true'
          nullable: true
        memo:
          type: string
          default: 'true'
          nullable: true
        sharedMembers:
          type: object
      required:
        - scheduled_by
        - title
        - start
        - end
        - is_public
        - color
        - memo
      x-examples:
        example-1:
          value:
            scheduled_by: 1
            title: string
            start: '2019-08-24T14:15:22Z'
            end: '2019-08-24T14:15:22Z'
            is_public: true
            color: 'true'
            memo: 'true'
            sharedMembers: {}
    Tag:
      title: Tag
      description: Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - name
        - created_at
        - updated_at
    Task:
      title: Task
      description: Task
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          $ref: '#/components/schemas/User'
        created_by:
          $ref: '#/components/schemas/User'
        priority:
          anyOf:
            - $ref: '#/components/schemas/Priority'
            - properties: {}
              nullable: true
        progress:
          anyOf:
            - $ref: '#/components/schemas/Progress'
            - properties: {}
              nullable: true
        body:
          type: string
        time_limit:
          $ref: '#/components/schemas/DateFormat'
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
      required:
        - id
        - owner
        - created_by
        - priority
        - progress
        - body
        - time_limit
        - created_at
        - updated_at
    TaskForm:
      title: TaskForm
      description: Taskの投稿フォーム
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        owner_id:
          type: integer
          format: int64
          example: 1
          minimum: 0
        created_by:
          type: integer
          format: int64
          example: 1
        priority_id:
          type: integer
          format: int64
          minimum: 0
          nullable: true
        progress_id:
          type: integer
          format: int64
          minimum: 0
          nullable: true
        body:
          type: string
        time_limit:
          $ref: '#/components/schemas/DateFormat'
        flag:
          type: integer
          nullable: true
      required:
        - owner_id
        - body
        - time_limit
    TaskDeleteForm:
      title: TaskDeleteForm
      description: TaskDeleteForm
      type: object
      properties:
        ids:
          type: array
          format: int64
          items:
            type: integer
    TaskPage:
      title: TaskPage
      description: タスク一覧のページ（ページャつき）
      type: object
      x-examples:
        example-1:
          value:
            data:
              - id: 0
                recorded_by:
                  id: 0
                  full_name: テスト 太郎
                  given_name: 太郎
                  family_name: テスト
                  file_path: users/test1.jpg
                  created_at: '2021-12-31 12:00:00'
                  updated_at: '2021-12-31 12:00:00'
                meeting_date: '2021-12-31 12:00:00'
                place: string
                title: 〇〇会議
                summary: 〇〇会議の概要
                members:
                  - id: 0
                    full_name: テスト 太郎
                    given_name: 太郎
                    family_name: テスト
                    file_path: users/test1.jpg
                    created_at: '2021-12-31 12:00:00'
                    updated_at: '2021-12-31 12:00:00'
                decisions: []
                created_at: '2021-12-31 12:00:00'
                updated_at: '2021-12-31 12:00:00'
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        first_page_url:
          description: 1ページ目のURL
          type: string
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        last_page:
          description: 最大ページ数
          type: integer
        last_page_url:
          description: 最終ページのURL
          type: string
        next_page_url:
          description: 次ページのURL
          type: string
          nullable: true
        path:
          description: 前ページのURL
          type: string
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        prev_page_url:
          description: 前ページのURL
          type: string
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
      required:
        - data
        - first_page_url
        - from
        - last_page
        - last_page_url
        - next_page_url
        - path
        - per_page
        - prev_page_url
        - to
        - total
    Pager:
      title: Pager
      description: リソースの一覧表示に使う　データ構造
      type: object
      x-examples:
        example-1:
          value:
            data: []
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      x-stoplight:
        id: 2ad6f38e6675a
      properties:
        meta:
          $ref: '#/components/schemas/PagerMetaData'
        links:
          type: object
          required:
            - first
            - last
            - next
            - prev
          properties:
            first:
              type: string
            last:
              type: string
            next:
              type: string
            prev:
              type: string
      required:
        - meta
        - links
    PagerMetaData:
      title: PagerMetaData
      description: リソースの一覧表示に使う　データ構造
      type: object
      x-examples:
        example-1:
          value:
            data: []
            first_page_url: string
            from: 0
            last_page: 0
            last_page_url: string
            next_page_url: string
            path: string
            per_page: 0
            prev_page_url: string
            to: 0
            total: 0
      x-stoplight:
        id: d5780c985211e
      properties:
        from:
          description: 現在のitemの開始位置
          type: integer
          nullable: true
        to:
          description: 現在のitemの終了位置
          type: integer
          nullable: true
        total:
          description: item総数
          type: integer
          default: 1
        per_page:
          description: 1ページあたりのアイテム数
          type: integer
        last_page:
          description: 最大ページ数
          type: integer
        path:
          description: 前ページのURL
          type: string
        current_page:
          description: 1ページ目のURL
          type: string
        links:
          type: array
          items:
            type: object
            properties:
              active:
                type: boolean
              url:
                type: string
              label:
                type: string
            required:
              - active
              - url
              - label
      required:
        - from
        - to
        - total
        - per_page
        - last_page
        - path
        - current_page
        - links
    User:
      title: User
      description: ユーザーのデータ
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        given_name:
          type: string
        given_name_kana:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        face_photo_path:
          type: string
        created_at:
          $ref: '#/components/schemas/DateFormat'
        updated_at:
          $ref: '#/components/schemas/DateFormat'
        is_initialized:
          type: boolean
        organization_id:
          type: integer
        email_verified_at:
          $ref: '#/components/schemas/DateFormat'
        email:
          type: string
          example: sample@example.com
          format: email
      required:
        - id
        - full_name
        - given_name
        - given_name_kana
        - family_name
        - family_name_kana
    Empty:
      title: Empty Schema
      type: object
    AccountVerificationInputs:
      type: object
      properties:
        user_id:
          type: string
        verification_code:
          type: string
      required:
        - user_id
        - verification_code
      x-stoplight:
        id: 0f42ea8afdea9
      title: AccountVerificationInputs
    ForgotPasswordInputs:
      title: ForgotPasswordInputs
      type: object
      x-stoplight:
        id: 90fd9a48b1ed3
      properties:
        user_id:
          type: string
      required:
        - user_id
    ForgotPasswordResetInputs:
      type: object
      title: ForgotPasswordResetInputs
      x-stoplight:
        id: b7ac4abd6e0ac
      properties:
        password:
          type: string
        user_id:
          type: string
        verification_code:
          type: string
      required:
        - password
        - user_id
        - verification_code
    PasswordResetInputs:
      type: object
      title: PasswordResetInputs
      x-stoplight:
        id: 2e41031eec7bd
      properties:
        old_password:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
      required:
        - old_password
        - password
        - password_confirmation
    SignInInputs:
      type: object
      title: SignInInputs
      x-stoplight:
        id: 864dab6669e32
      properties:
        user_id:
          type: string
        password:
          type: string
      required:
        - user_id
        - password
    SignUpInputs:
      type: object
      x-stoplight:
        id: 4d01b98d25510
      title: SignUpInputs
      properties:
        user_id:
          type: string
        password:
          type: string
        family_name:
          type: string
        family_name_kana:
          type: string
        given_name:
          type: string
        given_name_kana:
          type: string
        email:
          type: string
        address:
          type: string
      required:
        - user_id
        - password
        - family_name
        - family_name_kana
        - given_name
        - given_name_kana
        - email
  securitySchemes:
    job-support-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - '${userpool_arns}'
        type: cognito_user_pools
  requestBodies: {}
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: '''GET'''
      gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''http://localhost:3000'''
  ACCESS_DENIED:
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
      gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
x-amazon-apigateway-binary-media-types:
  - image/png
  - multipart/form-data
